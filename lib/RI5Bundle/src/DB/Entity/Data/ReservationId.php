<?php

namespace RI5\DB\Entity\Data;

class ReservationId{
   
    private int $day =0;
    private int $placeId;
    private int $queueId;
    private int $reservationId;
    private int $tableCapacity;

   

    private int $value;

   /**
    * Create new Reservation Id
    *
    * @param integer|null $day // Pass in 0 (Zero) set to 0, 0 
    *                          // 1< Val <10 will be added with 990000
    *                          // val >10 Autogenerated day.
    * @param integer|null $placeId
    * @param integer|null $queueId
    * @param integer|null $reservationid
    * @param integer|null $tableCapacity
    */
    public function __construct(?int $day=0, ?int $placeId=0, ?int $queueId=0, ?int $reservationid=0, ?int $tableCapacity=0)
    {
        switch($day){
            case 0:
                $this->day = 0;
                break;
            case (($day < 10 && $day >1) ? true :false):
                $this->day = str_pad($day, 5, '9', STR_PAD_LEFT);
                break;
            default:
                $this->day =(intval(date("y") . "" . str_pad(date("z")+1, 3, '0', STR_PAD_LEFT)));

        }
        //$this->day = ($day <= 1 ? (intval(date("y") . "" . str_pad(date("z")+1, 3, '0', STR_PAD_LEFT))) : str_pad($day, 5, '9', STR_PAD_LEFT));
        $this->placeId = $placeId;
        $this->queueId = $queueId;
        $this->reservationId = $reservationid;
        $this->tableCapacity = $tableCapacity;
        $this->value = $this->calculateId();
      
        return $this;
    }
    /**
     * Get Min Value for the day of reservation. 
     *
     * @return integer
     */
    public function getMinVal():int{
       return  intval($this->day . "" . 
                        str_pad($this->placeId, 4, '0', STR_PAD_LEFT)  ."".  
                        $this->queueId ."". 
                        "00000");
    }
    /**
     * Get Max Value of restautant
     *
     * @return integer
     */
    public function getMaxVal():int{
        return  intval($this->day . "" . 
                        str_pad($this->placeId, 4, '0', STR_PAD_LEFT)  ."".  
                        $this->queueId ."". 
                        "99999");
    }

    /**
     * Split Int into smaller parts
     *
     * @param integer $in
     * @param integer $start
     * @param integer $count
     * @return integer
     */
    private static function SplitInt(string $in, int $start, int $length): int {
        $ret = substr($in,$start,$length);
        return IntVal($ret);
    }
    /**
     * Convert into into ReservationId from inResId int
     *
     * @param integer $resId
     * @return self
     */
    public static function From(int $inResId): ReservationId
    {   
        return new ReservationId(
                            ReservationId::SplitInt($inResId,0,5),
                            ReservationId::SplitInt($inResId,5,4),
                            ReservationId::SplitInt($inResId,9,1),
                            ReservationId::SplitInt($inResId,10,4),
                            ReservationId::SplitInt($inResId,14,1)
                        );
    }
    /**
     * Generate an Empty ReservationId
     *
     * @return ReservationId
     */
    public static function Empty(): ReservationId
    {   
        return new ReservationId(0,0,0,0,0);
    }
    /**
     * Create next ReservationId from inResId int
     *
     * @param integer $inResId
     * @return self
     */
    public static function GetNext(int $inResId, int $tableCapacity): ReservationId
    {   
        $reservationId = ReservationId::From($inResId);
        return new ReservationId(
                        $reservationId->getDay(),
                        $reservationId->getPlaceId(),
                        $reservationId->getQueueId(),
                        $reservationId->getReservationId()+1,
                        $tableCapacity
                    );
    }

    
    private function calculateId() :int {
        return intval(
                $this->day . 
                str_pad($this->placeId, 4, '0', STR_PAD_LEFT) . 
                $this->queueId . 
                str_pad($this->reservationId, 4, '0', STR_PAD_LEFT) . 
                $this->tableCapacity
            );
    }
    public function Id() : int{
        return $this->value;
    }
    public function __toString(): string{
        return 
            str_pad($this->day, 5, '0', STR_PAD_LEFT). "." .
            str_pad($this->placeId, 4, '0', STR_PAD_LEFT) .  "." .
            str_pad($this->queueId, 1, '0', STR_PAD_LEFT)  .  "." .
            str_pad($this->reservationId, 4, '0', STR_PAD_LEFT) .  "." .
            str_pad($this->tableCapacity, 1, '0', STR_PAD_LEFT);
    }
    
   
    
    // public function __construct()
    // {
    //     // $this->day = intval(date("y") . "" . str_pad(date("z")+1, 3, '0', STR_PAD_LEFT));
    //     // $this->restaurant = $restaurant;
    //     // $this->reservation = $reservation;
    //     // $this->queue = $queue;
    //     // $this->tableCapacity = $tableCapacity;

    //     // $this->value = $this->calculateId();
    // }
    /**
     * Get the value of day
     */ 
    public function getDay()
    {
        return $this->day;
    }

    /**
     * Get the value of restaurant
     */ 
    public function getPlaceId()
    {
        return $this->placeId;
    }

    /**
     * Get the value of queue
     */ 
    public function getQueueId()
    {
        return $this->queueId;
    }

    /**
     * Get the value of reservation
     */ 
    public function getReservationId()
    {
        return $this->reservationId;
    }

    /**
     * Get the value of tableCapacity
     */ 
    public function getTableCapacity()
    {
        return $this->tableCapacity;
    }
}